Stabilization with context scheduler
User simulation
Actor Logging
Snapshot
Node Deletion/Leave
Key deletion
Key Transfer (node join/leave)
More than 8 nodes check
Unit and Integration Test

Read Me

If time permits:
1] Handling deal letters encountered
[INFO] [11/24/2016 18:02:25.705] [ChordProtocolHW4-akka.actor.default-dispatcher-6] [akka://ChordProtocolHW4/user/node_-1] Message [GetSuccessor] from Actor[akka://ChordProtocolHW4/temp/$a] to Actor[akka://ChordProtocolHW4/user/node_-1] was not delivered. [1] dead letters encountered. This logging can be turned off or adjusted with configuration settings 'akka.log-dead-letters' and 'akka.log-dead-letters-during-shutdown'.


Node joining: Transferring keys: The last operation that has to be performed
              when a node n joins the network is to move responsibility for all
              the keys for which node n is now the successor. Exactly what this
              entails depends on the higher-layer software using Chord, but typically
              it would involve moving the data associated with each key to
              the new node. Node n can become the successor only for keys that
              were previously the responsibility of the node immediately
              follow-ing n, so n only needs to contact that one node to transfer
              responsibility for all relevant keys.